comment "#";
comment "/#" "#/";

------------------
-- Basic Types  --
------------------

rules BasicType                 ::= "int" | "float" | "char" | "String" | "bool";
rules Boolean                   ::= "True" | "False";

-------------------
-- Program Start --
-------------------

ProgramStart.                   Program ::= [Stm];
terminator nonempty Stm ";";

------------------
-- Declarations --
------------------

VarDeclaration.                 Stm ::= BasicType Ident;   
VarDeclarationInit.             Stm ::= BasicType Ident "=" RExp;
ArrayDeclaration.               Stm ::= BasicType Ident [Dim];
ArrayDeclarationInit.           Stm ::= BasicType Ident [Dim] "=" RExp; 
PointerDeclaration.             Stm ::= BasicType "*" Ident;
PointerDeclarationInit.         Stm ::= BasicType "*" Ident "=" RExp;

---------------
-- Functions --
---------------

FunctionPrototype.              Stm ::= BasicType Ident "(" [Param] ")";
FunctionNoParamPrototype.       Stm ::= BasicType Ident "()";
ProcedurePrototype.             Stm ::= "None" Ident "(" [Param] ")";
ProcedureNoParamPrototype.      Stm ::= "None" Ident "()";
FunctionDeclaration.            Stm ::= "def" BasicType Ident "(" [Param] ")" "{" [Stm] "}";
FunctionNoParamDeclaration.     Stm ::= "def" BasicType Ident "()" "{" [Stm] "}";
ProcedureDeclaration.           Stm ::= "def" "None" Ident "(" [Param] ")" "{" [Stm] "}";
ProcedureNoParamDeclaration.    Stm ::= "def" "None" Ident "()" "{" [Stm] "}";
ProcedureCall.                  Stm ::= Ident "(" [RExp] ")";
ProcedureCallNoParam.           Stm ::= Ident "()";
Return.                         Stm ::= "return" RExp;
ReturnNone.                     Stm ::= "return";

----------------
-- Assignment --
----------------  

Assignment.                     Stm ::= LExp "=" RExp;

----------------------
-- Sequence Control --
----------------------

IfThen.                         Stm ::= "if"  RExp "{" [Stm] "}";
IfThenElse.                     Stm ::= "if"  RExp "{" [Stm] "}" "else" "{" [Stm] "}";
WhileDo.                        Stm ::= "while" RExp  "{" [Stm] "}";

Break.                          Stm ::= "break";
Continue.                       Stm ::= "continue";
Pass.                           Stm ::= "pass";

-------------------------
-- Function Parameters --
-------------------------

Parameter.                      Param ::= BasicType Ident;
separator Param ",";

----------------------
-- Array Dimensions --
----------------------

ArrayDimension.                 Dim ::= "[" RExp "]";
separator nonempty Dim "";  

ArrayValues.                    Arr ::= [ArrEntry];
ArrayEntry.                     ArrEntry ::= RExp;
separator nonempty ArrEntry ",";

----------------------
-- Left Expressions --
----------------------

LIdent.                         LExp ::= Ident;
LArray.                         LExp ::= Ident [Dim];

-----------------------
-- Right Expressions --
-----------------------   

ArrayStructure.                 RExp ::= "[" Arr "]";
    
Or.                             RExp ::= RExp "or" RExp2;
And.                            RExp ::= RExp "and" RExp2;
Not.                            RExp ::= "not" RExp2;
    
Eq.                             RExp2 ::= RExp2 "==" RExp3;
Neq.                            RExp2 ::= RExp2 "!=" RExp3;
Lt.                             RExp2 ::= RExp2 "<" RExp3;
Gt.                             RExp2 ::= RExp2 ">" RExp3;
Le.                             RExp2 ::= RExp2 "<=" RExp3;
Ge.                             RExp2 ::= RExp2 ">=" RExp3;

Add.                            RExp3 ::= RExp3 "+" RExp4;
Sub.                            RExp3 ::= RExp3 "-" RExp4;
    
Mul.                            RExp4 ::= RExp4 "*" RExp5;
Div.                            RExp4 ::= RExp4 "/" RExp5;
Mod.                            RExp4 ::= RExp4 "%" RExp5;

Pow.                            RExp5 ::= RExp5 "^" RExp6;

PointerRef.                     RExp6 ::= "&" RExp7;
DereferenceVal.                 RExp6 ::= "*" RExp7;
Neg.                            RExp6 ::= "-" RExp7;

IntValue.                       RExp7 ::= Integer;
FloatValue.                     RExp7 ::= Double;
StringValue.                    RExp7 ::= String;
CharValue.                      RExp7 ::= Char;
BooleanValue.                   RExp7 ::= Boolean;
VarValue.                       RExp7 ::= Ident;
    
ArrayIndexValue.                RExp7 ::= Ident [Dim];
FuncCall.                       RExp7 ::= Ident "(" [RExp] ")";
FuncCallNoParam.                RExp7 ::= Ident "()";
separator RExp ","; 
    
coercions RExp 7;   
    