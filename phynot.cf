ProgramStart.                   Program ::= [Stm];
terminator nonempty Stm ";";

comment "#";
comment "/#" "#/";

-- Types

rules BasicType                 ::= "int" | "float" | "char" | "String" | "bool";
rules Boolean                   ::= "True" | "False";


-- Declarations

VarDeclaration.                 Stm ::= BasicType Ident;   
VarDeclarationInit.             Stm ::= BasicType Ident "=" RExp;
ArrayDeclaration.               Stm ::= BasicType Ident [Dim];
PointerDeclaration.             Stm ::= BasicType "*" Ident;
PointerDeclarationInit.         Stm ::= BasicType "*" Ident "=" RExp;


-- Functions

FunctionDeclaration.            Stm ::= "def" BasicType Ident "(" [Param] ")" "{" [Stm] "}";
FunctionNoParamDeclaration.     Stm ::= "def" BasicType Ident "()" "{" [Stm] "}";
ProcedureDeclaration.           Stm ::= "def" "None" Ident "(" [Param] ")" "{" [Stm] "}";
ProcedureNoParamDeclaration.    Stm ::= "def" "None" Ident "()" "{" [Stm] "}";
separator Param ",";
Parameter.                      Param ::= BasicType Ident;
ProcedureCall.                  Stm ::= Ident "(" [RExp] ")";
ProcedureCallNoParam.           Stm ::= Ident "()";
Return.                         Stm ::= "return" RExp;
ReturnNone.                     Stm ::= "return";


-- Assignment   

Assignment.                     Stm ::= LExp "=" RExp;


-- Default Functions

WriteInt.                       Stm ::= "writeInt" "(" RExp ")";  
WriteFloat.                     Stm ::= "writeFloat" "(" RExp ")";
WriteChar.                      Stm ::= "writeChar" "(" RExp ")";
WriteString.                    Stm ::= "writeString" "(" RExp ")";
ReadInt.                        Stm ::= "readInt" "()";
ReadFloat.                      Stm ::= "readFloat" "()";
ReadChar.                       Stm ::= "readChar" "()";
ReadString.                     Stm ::= "readString" "()";


-- Sequence Control 

IfThen.                         Stm ::= "if"  RExp "{" [Stm] "}";
IfThenElse.                     Stm ::= "if"  RExp "{" [Stm] "}" "else" "{" [Stm] "}";
WhileDo.                        Stm ::= "while" RExp  "{" [Stm] "}";

Break.                          Stm ::= "break";
Continue.                       Stm ::= "continue";
Pass.                           Stm ::= "pass";


-- Left Expressions

LIdent.                         LExp ::= Ident;
LArray.                         LExp ::= Ident [Dim];
ArrayDimension.                 Dim ::= "[" RExp "]";
separator nonempty Dim "";  
    
-- Right Expressions    
    
Or.                             RExp ::= RExp "or" RExp2;
And.                            RExp ::= RExp "and" RExp2;
Not.                            RExp ::= "not" RExp2;
    
Eq.                             RExp2 ::= RExp2 "==" RExp3;
Neq.                            RExp2 ::= RExp2 "!=" RExp3;
Lt.                             RExp2 ::= RExp2 "<" RExp3;
Gt.                             RExp2 ::= RExp2 ">" RExp3;
Le.                             RExp2 ::= RExp2 "<=" RExp3;
Ge.                             RExp2 ::= RExp2 ">=" RExp3;
    
Add.                            RExp3 ::= RExp3 "+" RExp4;
Sub.                            RExp3 ::= RExp3 "-" RExp4;
Mul.                            RExp3 ::= RExp3 "*" RExp4;
Div.                            RExp3 ::= RExp3 "/" RExp4;
Mod.                            RExp3 ::= RExp3 "%" RExp4;
    
PointerRef.                     RExp4 ::= "&" RExp5;
DereferenceVal.                 RExp4 ::= "*" RExp5;
    
IntValue.                       RExp5 ::= Integer;
FloatValue.                     RExp5 ::= Double;
StringValue.                    RExp5 ::= String;
CharValue.                      RExp5 ::= Char;
BooleanValue.                   RExp5 ::= Boolean;
VarValue.                       RExp5 ::= Ident;
    
ArrayEntry.                     RExp5 ::= Ident [Dim];
FuncCall.                       RExp5 ::= Ident "(" [RExp] ")";
FuncCallNoParam.                RExp5 ::= Ident "()";
separator RExp ","; 
    
coercions RExp 5;   
    