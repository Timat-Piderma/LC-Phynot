comment "#";
comment "/#" "#/";

-----------
-- Types --
-----------

rules Type                      ::= BasicType | ArrayType | PointerType;
rules ArrayType                 ::= "[" RExp "]" Type;
rules PointerType               ::= "&" Type;

rules BasicType                 ::= "int" | "float" | "char" | "String" | "bool";
rules Boolean                   ::= "True" | "False";

-------------------
-- Program Start --
-------------------

ProgramStart.                   Program ::= [Stm];
terminator nonempty Stm ";";

------------------
-- Declarations --
------------------

VarDeclaration.                 Stm ::= Type Ident;   
VarDeclarationInit.             Stm ::= Type Ident "=" RExp;
ConstantDeclaration.            Stm ::= "const" Type Ident "=" RExp;

---------------
-- Functions --
---------------

FunctionPrototype.              Stm ::= Type Ident "(" [Param] ")";
ProcedurePrototype.             Stm ::= "None" Ident "(" [Param] ")";
FunctionDeclaration.            Stm ::= "def" Type Ident "(" [Param] ")" "{" [Stm] "}";
ProcedureDeclaration.           Stm ::= "def" "None" Ident "(" [Param] ")" "{" [Stm] "}";
ProcedureCall.                  Stm ::= Ident "(" [RExp] ")";
Return.                         Stm ::= "return" RExp;
ReturnNone.                     Stm ::= "return";

----------------
-- Assignment --
----------------  

Assignment.                     Stm ::= LExp "=" RExp;

----------------------
-- Sequence Control --
----------------------

IfThen.                         Stm ::= "if"  RExp "{" [Stm] "}";
IfThenElse.                     Stm ::= "if"  RExp "{" [Stm] "}" "else" "{" [Stm] "}";
WhileDo.                        Stm ::= "while" RExp  "{" [Stm] "}";

Break.                          Stm ::= "break";
Continue.                       Stm ::= "continue";
Pass.                           Stm ::= "pass";

-------------------------
-- Function Parameters --
-------------------------

Parameter.                      Param ::= Modality Type Ident;
separator Param ",";

-- No modality means passing by value
rules Modality                  ::= {-empty-} | "ref" | "res" | "valres" | "const";

----------------------
-- Array Dimensions --
----------------------

ArrayDimension.                 Dim ::= "[" RExp "]";
separator nonempty Dim "";  

ArrayValues.                    Arr ::= [ArrEntry];
ArrayEntry.                     ArrEntry ::= RExp;
separator nonempty ArrEntry ",";

----------------------
-- Left Expressions --
----------------------

LIdent.                         LExp ::= Ident;
LArray.                         LExp ::= Ident [Dim];
LPointer.                       LExp ::= "*" Ident;

-----------------------
-- Right Expressions --
-----------------------   
    
Or.                             RExp ::= RExp "or" RExp1;
And.                            RExp ::= RExp "and" RExp1;
Not.                            RExp ::= "not" RExp1;
    
Eq.                             RExp1 ::= RExp1 "==" RExp2;
Neq.                            RExp1 ::= RExp1 "!=" RExp2;
Lt.                             RExp1 ::= RExp1 "<" RExp2;
Gt.                             RExp1 ::= RExp1 ">" RExp2;
Le.                             RExp1 ::= RExp1 "<=" RExp2;
Ge.                             RExp1 ::= RExp1 ">=" RExp2;

Add.                            RExp2 ::= RExp2 "+" RExp3;
Sub.                            RExp2 ::= RExp2 "-" RExp3;
    
Mul.                            RExp3 ::= RExp3 "*" RExp4;
Div.                            RExp3 ::= RExp3 "/" RExp4;
Mod.                            RExp3 ::= RExp3 "%" RExp4;

Pow.                            RExp4 ::= RExp4 "^" RExp5;

PointerRef.                     RExp5 ::= "&" RExp6;
DereferenceVal.                 RExp5 ::= "*" RExp6;
Neg.                            RExp5 ::= "-" RExp6;

IntValue.                       RExp6 ::= Integer;
FloatValue.                     RExp6 ::= Double;
StringValue.                    RExp6 ::= String;
CharValue.                      RExp6 ::= Char;
BooleanValue.                   RExp6 ::= Boolean;
VarValue.                       RExp6 ::= Ident;
ArrayStructure.                 RExp6 ::= "[" Arr "]";
    
ArrayIndexValue.                RExp6 ::= Ident [Dim];
FuncCall.                       RExp6 ::= Ident "(" [RExp] ")";
separator RExp ","; 
    
coercions RExp 6;   
    