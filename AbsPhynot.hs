-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language phynot.

module AbsPhynot where

import Prelude (Char, Double, Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Type
    = TypeBasicType BasicType
    | TypeArrayType ArrayType
    | TypePointerType PointerType
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ArrayType = ArrayType1 RExp Type
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data PointerType = PointerType1 Type
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data BasicType
    = BasicType_int
    | BasicType_float
    | BasicType_char
    | BasicType_String
    | BasicType_bool
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Boolean = Boolean_True | Boolean_False
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Program = ProgramStart [Stm]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Stm
    = VarDeclaration Type Ident
    | VarDeclarationInit Type Ident RExp
    | ConstantDeclaration Type Ident RExp
    | FunctionPrototype Type Ident [Param]
    | ProcedurePrototype Ident [Param]
    | FunctionDeclaration Type Ident [Param] [Stm]
    | ProcedureDeclaration Ident [Param] [Stm]
    | ProcedureCall Ident [RExp]
    | Return RExp
    | ReturnNone
    | Assignment LExp RExp
    | IfThen RExp [Stm]
    | IfThenElse RExp [Stm] [Stm]
    | WhileDo RExp [Stm]
    | Break
    | Continue
    | Pass
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Param = Parameter Modality Type Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Modality
    = Modality1
    | Modality_ref
    | Modality_res
    | Modality_valres
    | Modality_const
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Dim = ArrayDimension RExp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Arr = ArrayValues [ArrEntry]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ArrEntry = ArrayEntry RExp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LExp = LIdent Ident | LArray Ident [Dim] | LPointer Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data RExp
    = Or RExp RExp
    | And RExp RExp
    | Not RExp
    | Eq RExp RExp
    | Neq RExp RExp
    | Lt RExp RExp
    | Gt RExp RExp
    | Le RExp RExp
    | Ge RExp RExp
    | Add RExp RExp
    | Sub RExp RExp
    | Mul RExp RExp
    | Div RExp RExp
    | Mod RExp RExp
    | Pow RExp RExp
    | PointerRef RExp
    | DereferenceVal RExp
    | Neg RExp
    | IntValue Integer
    | FloatValue Double
    | StringValue String
    | CharValue Char
    | BooleanValue Boolean
    | VarValue Ident
    | ArrayStructure Arr
    | ArrayIndexValue Ident [Dim]
    | FuncCall Ident [RExp]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

