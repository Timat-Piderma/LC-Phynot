-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelPhynot where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsPhynot

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsPhynot.Ident -> Result
transIdent x = case x of
  AbsPhynot.Ident string -> failure x

transType :: AbsPhynot.Type -> Result
transType x = case x of
  AbsPhynot.TypeBasicType basictype -> failure x
  AbsPhynot.TypeArrayType arraytype -> failure x
  AbsPhynot.TypePointerType pointertype -> failure x

transArrayType :: AbsPhynot.ArrayType -> Result
transArrayType x = case x of
  AbsPhynot.ArrayType1 rexp type_ -> failure x

transPointerType :: AbsPhynot.PointerType -> Result
transPointerType x = case x of
  AbsPhynot.PointerType1 type_ -> failure x

transBasicType :: AbsPhynot.BasicType -> Result
transBasicType x = case x of
  AbsPhynot.BasicType_int -> failure x
  AbsPhynot.BasicType_float -> failure x
  AbsPhynot.BasicType_char -> failure x
  AbsPhynot.BasicType_String -> failure x
  AbsPhynot.BasicType_bool -> failure x

transBoolean :: AbsPhynot.Boolean -> Result
transBoolean x = case x of
  AbsPhynot.Boolean_True -> failure x
  AbsPhynot.Boolean_False -> failure x

transProgram :: AbsPhynot.Program -> Result
transProgram x = case x of
  AbsPhynot.ProgramStart stms -> failure x

transStm :: AbsPhynot.Stm -> Result
transStm x = case x of
  AbsPhynot.VarDeclaration type_ ident -> failure x
  AbsPhynot.VarDeclarationInit type_ ident rexp -> failure x
  AbsPhynot.ConstantDeclaration type_ ident rexp -> failure x
  AbsPhynot.FunctionPrototype type_ ident params -> failure x
  AbsPhynot.ProcedurePrototype ident params -> failure x
  AbsPhynot.FunctionDeclaration type_ ident params stms -> failure x
  AbsPhynot.ProcedureDeclaration ident params stms -> failure x
  AbsPhynot.ProcedureCall ident rexps -> failure x
  AbsPhynot.Return rexp -> failure x
  AbsPhynot.ReturnNone -> failure x
  AbsPhynot.Assignment lexp rexp -> failure x
  AbsPhynot.IfThen rexp stms -> failure x
  AbsPhynot.IfThenElse rexp stms1 stms2 -> failure x
  AbsPhynot.WhileDo rexp stms -> failure x
  AbsPhynot.Break -> failure x
  AbsPhynot.Continue -> failure x
  AbsPhynot.Pass -> failure x

transParam :: AbsPhynot.Param -> Result
transParam x = case x of
  AbsPhynot.Parameter modality type_ ident -> failure x

transModality :: AbsPhynot.Modality -> Result
transModality x = case x of
  AbsPhynot.Modality1 -> failure x
  AbsPhynot.Modality_ref -> failure x
  AbsPhynot.Modality_res -> failure x
  AbsPhynot.Modality_valres -> failure x
  AbsPhynot.Modality_const -> failure x

transDim :: AbsPhynot.Dim -> Result
transDim x = case x of
  AbsPhynot.ArrayDimension rexp -> failure x

transArr :: AbsPhynot.Arr -> Result
transArr x = case x of
  AbsPhynot.ArrayValues arrentrys -> failure x

transArrEntry :: AbsPhynot.ArrEntry -> Result
transArrEntry x = case x of
  AbsPhynot.ArrayEntry rexp -> failure x

transLExp :: AbsPhynot.LExp -> Result
transLExp x = case x of
  AbsPhynot.LIdent ident -> failure x
  AbsPhynot.LArray ident dims -> failure x
  AbsPhynot.LPointer ident -> failure x

transRExp :: AbsPhynot.RExp -> Result
transRExp x = case x of
  AbsPhynot.ArrayStructure arr -> failure x
  AbsPhynot.Or rexp1 rexp2 -> failure x
  AbsPhynot.And rexp1 rexp2 -> failure x
  AbsPhynot.Not rexp -> failure x
  AbsPhynot.Eq rexp1 rexp2 -> failure x
  AbsPhynot.Neq rexp1 rexp2 -> failure x
  AbsPhynot.Lt rexp1 rexp2 -> failure x
  AbsPhynot.Gt rexp1 rexp2 -> failure x
  AbsPhynot.Le rexp1 rexp2 -> failure x
  AbsPhynot.Ge rexp1 rexp2 -> failure x
  AbsPhynot.Add rexp1 rexp2 -> failure x
  AbsPhynot.Sub rexp1 rexp2 -> failure x
  AbsPhynot.Mul rexp1 rexp2 -> failure x
  AbsPhynot.Div rexp1 rexp2 -> failure x
  AbsPhynot.Mod rexp1 rexp2 -> failure x
  AbsPhynot.Pow rexp1 rexp2 -> failure x
  AbsPhynot.PointerRef rexp -> failure x
  AbsPhynot.DereferenceVal rexp -> failure x
  AbsPhynot.Neg rexp -> failure x
  AbsPhynot.IntValue integer -> failure x
  AbsPhynot.FloatValue double -> failure x
  AbsPhynot.StringValue string -> failure x
  AbsPhynot.CharValue char -> failure x
  AbsPhynot.BooleanValue boolean -> failure x
  AbsPhynot.VarValue ident -> failure x
  AbsPhynot.ArrayIndexValue ident dims -> failure x
  AbsPhynot.FuncCall ident rexps -> failure x
